name: Build Cordlang Installer

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: false
        type: boolean

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            extension: deb
          - os: windows-latest
            platform: win
            extension: exe
          - os: macos-latest
            platform: mac
            extension: dmg
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Build Electron app for ${{ matrix.platform }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ matrix.platform }}" == "win" ]; then
          npm run build -- --win --x64
        elif [ "${{ matrix.platform }}" == "mac" ]; then
          npm run build -- --mac --x64
        else
          npm run build -- --linux deb --x64
        fi
      shell: bash
    
    - name: Create output directories
      run: |
        mkdir -p build/win
        mkdir -p build/mac
        mkdir -p build/linux
      shell: bash

    - name: Copy artifacts to build directory
      run: |
        if [ "${{ matrix.platform }}" == "win" ]; then
          cp release/*.exe build/win/installer.exe || echo "No Windows installer found"
        elif [ "${{ matrix.platform }}" == "mac" ]; then
          cp release/*.dmg build/mac/installer.dmg || echo "No macOS installer found"
        else
          cp release/*.deb build/linux/installer.deb || echo "No Linux installer found"
        fi
      shell: bash

    - name: Verify existence of the artifact
      run: ls -la build/${{ matrix.platform }}
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: cordlang-installer-${{ matrix.platform }}
        path: build/${{ matrix.platform }}/installer.${{ matrix.extension }}
        if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout repository for release notes
      uses: actions/checkout@v3
      
    - name: Get version from tag
      id: get-version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y%m%d%H%M%S')
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -R artifacts
      
    - name: Set up artifacts for release
      run: |
        mkdir -p release-artifacts
        cp artifacts/cordlang-installer-win/installer.exe release-artifacts/cordlang-installer-${{ steps.get-version.outputs.version }}-win-x64.exe
        cp artifacts/cordlang-installer-mac/installer.dmg release-artifacts/cordlang-installer-${{ steps.get-version.outputs.version }}-mac-x64.dmg
        cp artifacts/cordlang-installer-linux/installer.deb release-artifacts/cordlang-installer-${{ steps.get-version.outputs.version }}-linux-x64.deb
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release v${{ steps.get-version.outputs.version }}
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref || format('v{0}', steps.get-version.outputs.version) }}
        draft: false
        prerelease: false
        body: |
          # Cordlang Installer v${{ steps.get-version.outputs.version }}
          
          Instalador multiplataforma de Cordlang.
          
          ## Características
          
          * Instalador disponible para Windows, macOS y Linux
          * Instalación completa del paquete cordlang global
          * Verificación y configuración automática de requisitos previos
        files: |
          release-artifacts/cordlang-installer-${{ steps.get-version.outputs.version }}-win-x64.exe
          release-artifacts/cordlang-installer-${{ steps.get-version.outputs.version }}-mac-x64.dmg
          release-artifacts/cordlang-installer-${{ steps.get-version.outputs.version }}-linux-x64.deb
